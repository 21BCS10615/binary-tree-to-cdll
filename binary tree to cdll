class Solution
{
  public:
  
    Node* bTreeToCListUtil(Node* root) {
        if (!root) return NULL;
    
        Node* left = bTreeToCListUtil(root->left);
        Node* right = bTreeToCListUtil(root->right);
    
        root->left = root->right = root;
    
        return concatenate(concatenate(left, root), right);
    }
    
    Node* bTreeToCList(Node* root) {
        if (!root) return NULL;
    
        Node* head = bTreeToCListUtil(root);
    
        // The concatenate function is assumed to concatenate two circular doubly linked lists
        return head;
    }
    
    Node* concatenate(Node* leftList, Node* rightList) {
        if (!leftList) return rightList;
        if (!rightList) return leftList;
    
        Node* leftLast = leftList->left;
        Node* rightLast = rightList->left;
    
        leftLast->right = rightList;
        rightList->left = leftLast;
    
        leftList->left = rightLast;
        rightLast->right = leftList;
    
        return leftList;
    }
    
    void printList(Node* head) {
        if (!head) return;
    
        Node* temp = head;
    
        do {
            cout << temp->data << " ";
            temp = temp->right;
        } while (temp != head);
    
        cout << endl;
    }

    //Function to convert binary tree into circular doubly linked list.
  
};
